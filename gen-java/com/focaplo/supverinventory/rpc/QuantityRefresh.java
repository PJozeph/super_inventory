/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.focaplo.supverinventory.rpc;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class QuantityRefresh implements TBase<QuantityRefresh._Fields>, java.io.Serializable, Cloneable, Comparable<QuantityRefresh> {
  private static final TStruct STRUCT_DESC = new TStruct("QuantityRefresh");

  private static final TField UID_FIELD_DESC = new TField("uid", TType.I32, (short)1);
  private static final TField ITEM_NUMBER_FIELD_DESC = new TField("itemNumber", TType.STRING, (short)2);
  private static final TField CURRENT_ON_HAND_QUANTITY_FIELD_DESC = new TField("currentOnHandQuantity", TType.I32, (short)3);
  private static final TField WAREHOUSE_NUMBER_FIELD_DESC = new TField("warehouseNumber", TType.STRING, (short)4);

  public int uid;
  public String itemNumber;
  public int currentOnHandQuantity;
  public String warehouseNumber;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    UID((short)1, "uid"),
    ITEM_NUMBER((short)2, "itemNumber"),
    CURRENT_ON_HAND_QUANTITY((short)3, "currentOnHandQuantity"),
    WAREHOUSE_NUMBER((short)4, "warehouseNumber");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __CURRENTONHANDQUANTITY_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.UID, new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(_Fields.ITEM_NUMBER, new FieldMetaData("itemNumber", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.CURRENT_ON_HAND_QUANTITY, new FieldMetaData("currentOnHandQuantity", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(_Fields.WAREHOUSE_NUMBER, new FieldMetaData("warehouseNumber", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(QuantityRefresh.class, metaDataMap);
  }

  public QuantityRefresh() {
  }

  public QuantityRefresh(
    int uid,
    String itemNumber,
    int currentOnHandQuantity,
    String warehouseNumber)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.itemNumber = itemNumber;
    this.currentOnHandQuantity = currentOnHandQuantity;
    setCurrentOnHandQuantityIsSet(true);
    this.warehouseNumber = warehouseNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuantityRefresh(QuantityRefresh other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.uid = other.uid;
    if (other.isSetItemNumber()) {
      this.itemNumber = other.itemNumber;
    }
    this.currentOnHandQuantity = other.currentOnHandQuantity;
    if (other.isSetWarehouseNumber()) {
      this.warehouseNumber = other.warehouseNumber;
    }
  }

  public QuantityRefresh deepCopy() {
    return new QuantityRefresh(this);
  }

  @Deprecated
  public QuantityRefresh clone() {
    return new QuantityRefresh(this);
  }

  public int getUid() {
    return this.uid;
  }

  public QuantityRefresh setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been asigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public String getItemNumber() {
    return this.itemNumber;
  }

  public QuantityRefresh setItemNumber(String itemNumber) {
    this.itemNumber = itemNumber;
    return this;
  }

  public void unsetItemNumber() {
    this.itemNumber = null;
  }

  /** Returns true if field itemNumber is set (has been asigned a value) and false otherwise */
  public boolean isSetItemNumber() {
    return this.itemNumber != null;
  }

  public void setItemNumberIsSet(boolean value) {
    if (!value) {
      this.itemNumber = null;
    }
  }

  public int getCurrentOnHandQuantity() {
    return this.currentOnHandQuantity;
  }

  public QuantityRefresh setCurrentOnHandQuantity(int currentOnHandQuantity) {
    this.currentOnHandQuantity = currentOnHandQuantity;
    setCurrentOnHandQuantityIsSet(true);
    return this;
  }

  public void unsetCurrentOnHandQuantity() {
    __isset_bit_vector.clear(__CURRENTONHANDQUANTITY_ISSET_ID);
  }

  /** Returns true if field currentOnHandQuantity is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentOnHandQuantity() {
    return __isset_bit_vector.get(__CURRENTONHANDQUANTITY_ISSET_ID);
  }

  public void setCurrentOnHandQuantityIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTONHANDQUANTITY_ISSET_ID, value);
  }

  public String getWarehouseNumber() {
    return this.warehouseNumber;
  }

  public QuantityRefresh setWarehouseNumber(String warehouseNumber) {
    this.warehouseNumber = warehouseNumber;
    return this;
  }

  public void unsetWarehouseNumber() {
    this.warehouseNumber = null;
  }

  /** Returns true if field warehouseNumber is set (has been asigned a value) and false otherwise */
  public boolean isSetWarehouseNumber() {
    return this.warehouseNumber != null;
  }

  public void setWarehouseNumberIsSet(boolean value) {
    if (!value) {
      this.warehouseNumber = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case ITEM_NUMBER:
      if (value == null) {
        unsetItemNumber();
      } else {
        setItemNumber((String)value);
      }
      break;

    case CURRENT_ON_HAND_QUANTITY:
      if (value == null) {
        unsetCurrentOnHandQuantity();
      } else {
        setCurrentOnHandQuantity((Integer)value);
      }
      break;

    case WAREHOUSE_NUMBER:
      if (value == null) {
        unsetWarehouseNumber();
      } else {
        setWarehouseNumber((String)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return new Integer(getUid());

    case ITEM_NUMBER:
      return getItemNumber();

    case CURRENT_ON_HAND_QUANTITY:
      return new Integer(getCurrentOnHandQuantity());

    case WAREHOUSE_NUMBER:
      return getWarehouseNumber();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case UID:
      return isSetUid();
    case ITEM_NUMBER:
      return isSetItemNumber();
    case CURRENT_ON_HAND_QUANTITY:
      return isSetCurrentOnHandQuantity();
    case WAREHOUSE_NUMBER:
      return isSetWarehouseNumber();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuantityRefresh)
      return this.equals((QuantityRefresh)that);
    return false;
  }

  public boolean equals(QuantityRefresh that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_itemNumber = true && this.isSetItemNumber();
    boolean that_present_itemNumber = true && that.isSetItemNumber();
    if (this_present_itemNumber || that_present_itemNumber) {
      if (!(this_present_itemNumber && that_present_itemNumber))
        return false;
      if (!this.itemNumber.equals(that.itemNumber))
        return false;
    }

    boolean this_present_currentOnHandQuantity = true;
    boolean that_present_currentOnHandQuantity = true;
    if (this_present_currentOnHandQuantity || that_present_currentOnHandQuantity) {
      if (!(this_present_currentOnHandQuantity && that_present_currentOnHandQuantity))
        return false;
      if (this.currentOnHandQuantity != that.currentOnHandQuantity)
        return false;
    }

    boolean this_present_warehouseNumber = true && this.isSetWarehouseNumber();
    boolean that_present_warehouseNumber = true && that.isSetWarehouseNumber();
    if (this_present_warehouseNumber || that_present_warehouseNumber) {
      if (!(this_present_warehouseNumber && that_present_warehouseNumber))
        return false;
      if (!this.warehouseNumber.equals(that.warehouseNumber))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QuantityRefresh other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QuantityRefresh typedOther = (QuantityRefresh)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {      lastComparison = TBaseHelper.compareTo(uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemNumber()).compareTo(typedOther.isSetItemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemNumber()) {      lastComparison = TBaseHelper.compareTo(itemNumber, typedOther.itemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentOnHandQuantity()).compareTo(typedOther.isSetCurrentOnHandQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentOnHandQuantity()) {      lastComparison = TBaseHelper.compareTo(currentOnHandQuantity, typedOther.currentOnHandQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarehouseNumber()).compareTo(typedOther.isSetWarehouseNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouseNumber()) {      lastComparison = TBaseHelper.compareTo(warehouseNumber, typedOther.warehouseNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // UID
          if (field.type == TType.I32) {
            this.uid = iprot.readI32();
            setUidIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ITEM_NUMBER
          if (field.type == TType.STRING) {
            this.itemNumber = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CURRENT_ON_HAND_QUANTITY
          if (field.type == TType.I32) {
            this.currentOnHandQuantity = iprot.readI32();
            setCurrentOnHandQuantityIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // WAREHOUSE_NUMBER
          if (field.type == TType.STRING) {
            this.warehouseNumber = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(UID_FIELD_DESC);
    oprot.writeI32(this.uid);
    oprot.writeFieldEnd();
    if (this.itemNumber != null) {
      oprot.writeFieldBegin(ITEM_NUMBER_FIELD_DESC);
      oprot.writeString(this.itemNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CURRENT_ON_HAND_QUANTITY_FIELD_DESC);
    oprot.writeI32(this.currentOnHandQuantity);
    oprot.writeFieldEnd();
    if (this.warehouseNumber != null) {
      oprot.writeFieldBegin(WAREHOUSE_NUMBER_FIELD_DESC);
      oprot.writeString(this.warehouseNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuantityRefresh(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemNumber:");
    if (this.itemNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.itemNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentOnHandQuantity:");
    sb.append(this.currentOnHandQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warehouseNumber:");
    if (this.warehouseNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.warehouseNumber);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

